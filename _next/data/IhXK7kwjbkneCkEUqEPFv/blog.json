{"pageProps":{"posts":[{"slug":"sparse-sets","title":"Sparse Sets - Uma Representação Eficiente de Conjuntos Numéricos","date":"2022-04-03 14:00:10 -0300","tags":["estrutura-de-dados"],"content":"\n# Conjuntos\n**Conjunto Numérico** é uma abstração fundamental bastante utilizada na programação, várias representações são possíveis, cada uma com suas vantagens e desvantagens. Existem duas principais representações amplamente utilizadas: **Árvores Binárias** e **Tabelas Hash**\n## Representações mais comuns\n### Árvores Binárias de Busca\nEsta representação se aproveita da habilidade de inserir elementos ordenados e rotacionar a árvores para mantêlá balanceada para representação conjuntos, e é vantajosa quando o conjunto precisa sempre estar ordenado e possuir muitos elementos.\n### Tabelas Hash\nEsta representação ganha destaque pelo desempenho superior ao das árvores binárias enquanto existirem poucos elementos e por consequência poucas colisões, porém a ordem não pode ser obrigatória.\n### Tabela de Complexidade Assintótica\n\n\nOperação   |Árvore Binária |Tabela Hash    \n---------- | ------------- | -----------\nInserir    |O(lg⁡(n))       |o(1); O(n)             \nRemover    |O(lg⁡(n))       |o(1); O(n)             \nPesquisar  |O(lg⁡(n))       |o(1); O(n)             \nLimpar     |O(lg⁡(n))       |o(1); O(n)           \nIterar     |O(n)           |O(n)                 \nEspaço     |O(n)           |O(n)           \n\n# Sparse Sets\n**Sparse Set** é uma estrutura de dados simples e muito eficiente que garante um conjunto de números únicos, porém não ordenados. \nSua implementação é formada por dois arranjos de números, um esparso ($S$) e outro denso ($$D$$), sendo $$|S| + 1$$ o valor máximo que pode ser inserido no conjunto, e para que um elemento n exista no conjunto esparso, as seguintes restrições devem ser atendidas:\n\n## Restrições\n\n### Quantidade\nA quantidade máxima de números que podem ser adicionados é igual ao maior número que será inserido mais 1:\n\n$$0 < S[n] < |S|$$\n\n### Índice\nO índice $$n$$ do conjunto esparso aponta para o índice do número $$n$$ no conjunto denso:\n\n$$D[S[n]] == n$$\n\n\nEx: {5, 1, 4}\n\n<center>\n<img src=\"/images/sparse-sets.png\" />\n</center>\n\n## Vantagens\n\n### Complexidade Assintótica Superior\n\nOperação   |Árvore Binária |Tabela Hash | Sparse Set\n---------- | ------------- | ---------- | -----------\nInserir    |O(lg⁡(n))       |o(1); O(n)  |O(1)\nRemover    |O(lg⁡(n))       |o(1); O(n)  |O(1)           \nPesquisar  |O(lg⁡(n))       |o(1); O(n)  |O(1)       \nLimpar     |O(lg⁡(n))       |o(1); O(n)  |O(1)     \nIterar     |O(n)           |O(n)        |O(n)    \nEspaço     |O(n)           |O(n)        |O(n)\n\n### Layout de memória\n\nOs números que pertencem ao conjunto são organizados **contiguamente** no arranjo denso, dando uma vantagem enorme nas operações de inserir, remover, pesquisar e iteração por ter um layout de memória amigável ao cache do processador. Vale lembrar que operações de união, intersecção e diferença são exemplos extremamente relevantes de operações que são implementadas com as operações de inserir, remover, pesquisar e iterar.\n## Desvantagens\n### Quantidade finita\nAs outras representações de conjuntos não possuem a limitação de quantidade existente na definição da estrutura do sparse set, porém ainda são limitadas pelos limites de hardware.\n### Números negativos \nPela definição da implementação do sparse set ser relativo aos índices, os números negativos não podem ser adicionados nesses conjuntos a menos que: seja delimitado o menor e maior número que pode ser adicionado e com base nisso, os números sejam convertidos para os seus respectivos índices, por exemplo:\n\n<center>\n<p>Menor: -10, Maior: 100</p>\n</center>\n\níndice|0   |1  |2  |...|10 |...|109\n:-----|:--:|:-:|:-:|:-:|:-:|:-:|:--:\nvalor |-10 | -9| -8|...| 0 |...|100 \n\n## Glossário\n\n### Contiguamente\nDe modo contíguo, vizinho, próximo, um ao lado do outro."},{"slug":"particionamento-espacial-de-dados","title":"Particionamento Espacial de Dados","date":"11/11/2021","tags":["hello","world"],"content":"\n# Conceito\n\nasds\n"},{"slug":"welcome","title":"Bem vindo","date":"03/28/2021","tags":["well","come","hello"],"content":"\nYou’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated.\n\nTo add new posts, simply add a file in the `_posts` directory that follows the convention `YYYY-MM-DD-name-of-post.ext` and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.\n\nJekyll also offers powerful support for code snippets:\n\n```ruby\ndef print_hi(name)\nputs \"Hi, #{name}\"\nend\nprint_hi('Tom')\n#=> prints 'Hi, Tom' to STDOUT.\n```\n\nCheck out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].\n\n[jekyll-docs]: https://jekyllrb.com/docs/home\n[jekyll-gh]: https://github.com/jekyll/jekyll\n[jekyll-talk]: https://talk.jekyllrb.com/\n"},{"slug":"hello-world","title":"Hello World","date":"02/28/2021","tags":["hello","world"],"content":"\nThis is an example post. There's another one [here](/posts/example-post).\n:poop:\n:white_check_mark:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\n/*\n * oaskdoaskd\n */\n\n class Application\n {\npublic:\n    Application(string name) : m_name(name) {}\n    ~Application() = default;\n\n    string get_name() { return m_name; }\nprivate:\n    string m_name;\n }\n\n// main function to initialize the application\nint main(int argc, char** argv)\n{\n    Application app = new Application(\"hello\");\n\n    cout << \"hello world\" << endl;\n\n    return 0;\n}\n\n```\n"}]},"__N_SSG":true}